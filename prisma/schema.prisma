// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?
  image         String?
  phone         String?
  role          Role      @default(CLIENT)
  emailVerified DateTime?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  properties    Property[]
  favorites     Favorite[]
  payments      Payment[]
  messages      Message[]
  appointments  Appointment[]
  reviews       Review[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Property {
  id              String        @id @default(cuid())
  title           String
  description     String        @db.Text
  price           Decimal       @db.Decimal(10, 2)
  type            PropertyType
  status          PropertyStatus @default(AVAILABLE)
  surface         Int
  rooms           Int
  bedrooms        Int
  bathrooms       Int
  floor           Int?
  totalFloors     Int?
  yearBuilt       Int?
  energyClass     String?
  address         String
  city            String
  zipCode         String
  country         String        @default("Tunisia")
  latitude        Float?
  longitude       Float?
  features        Json?
  images          Json?
  documents       Json?
  virtualTour     String?
  videoUrl        String?
  isPublished     Boolean       @default(false)
  isFeatured      Boolean       @default(false)
  views           Int           @default(0)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  publishedAt     DateTime?

  // Relations
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  favorites       Favorite[]
  payments        Payment[]
  appointments    Appointment[]
  reviews         Review[]
  messages        Message[]

  @@map("properties")
}

model Favorite {
  id         String   @id @default(cuid())
  userId     String
  propertyId String
  createdAt  DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([userId, propertyId])
  @@map("favorites")
}



model Payment {
  id              String        @id @default(cuid())
  userId          String
  propertyId      String
  stripePaymentId String        @unique
  amount          Decimal       @db.Decimal(10, 2)
  currency        String        @default("TND")
  status          PaymentStatus
  type            PaymentType
  description     String?
  metadata        Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  user     User     @relation(fields: [userId], references: [id])
  property Property @relation(fields: [propertyId], references: [id])

  @@map("payments")
}

model Message {
  id           String        @id @default(cuid())
  userId       String
  name         String
  email        String
  phone        String?
  subject      String
  message      String        @db.Text
  status       MessageStatus @default(PENDING)
  response     String?       @db.Text
  propertyType String?
  budget       String?
  timeframe    String?
  propertyId   String?
  priority     MessagePriority @default(MEDIUM)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  user     User     @relation(fields: [userId], references: [id])
  property Property? @relation(fields: [propertyId], references: [id])

  @@map("messages")
}

model Appointment {
  id          String            @id @default(cuid())
  userId      String
  propertyId  String
  date        DateTime
  time        String
  status      AppointmentStatus @default(PENDING)
  notes       String?           @db.Text
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  user     User     @relation(fields: [userId], references: [id])
  property Property @relation(fields: [propertyId], references: [id])

  @@map("appointments")
}

model Review {
  id         String   @id @default(cuid())
  userId     String
  propertyId String
  rating     Int
  comment    String?  @db.Text
  isPublished Boolean @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id])
  property Property @relation(fields: [propertyId], references: [id])

  @@unique([userId, propertyId])
  @@map("reviews")
}

model BlogPost {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  excerpt     String
  content     String   @db.Text
  image       String?
  isPublished Boolean  @default(false)
  views       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("blog_posts")
}

model Settings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String   @db.Text
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("settings")
}

// Enums
enum Role {
  CLIENT
  AGENT
  ADMIN
}

enum PropertyType {
  APARTMENT
  HOUSE
  STUDIO
  LOFT
  VILLA
  COMMERCIAL
  LAND
  PARKING
}

enum PropertyStatus {
  AVAILABLE
  RESERVED
  SOLD
  RENTED
  DRAFT
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELED
  REFUNDED
}

enum PaymentType {
  RESERVATION
  DEPOSIT
  COMMISSION
  SERVICE
}

enum MessageStatus {
  PENDING
  READ
  REPLIED
  CLOSED
}

enum MessagePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELED
}


